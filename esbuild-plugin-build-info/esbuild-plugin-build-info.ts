import type { Plugin } from "esbuild";
import { exec } from "node:child_process";

export interface BuildInfo {
  timestamp: Date;
  branch: string;
  commit: string;
}

export async function branch(): Promise<BuildInfo["branch"]> {
  if (process.env.GITHUB_REF_NAME) {
    return process.env.GITHUB_REF_NAME;
  }
  return new Promise((resolve, reject) => {
    exec("git rev-parse --abbrev-ref HEAD", {}, (error, stdout, stderr) => {
      if (stderr) {
        console.warn(stderr);
      }
      if (error) {
        reject(error);
      }
      resolve(stdout.trim());
    });
  });
}

export async function commit(): Promise<BuildInfo["commit"]> {
  if (process.env.GITHUB_SHA) {
    return process.env.GITHUB_SHA;
  }
  return new Promise((resolve, reject) => {
    exec(`git show --format="%H" -s HEAD`, {}, (error, stdout, stderr) => {
      if (stderr) {
        console.warn(stderr);
      }
      if (error) {
        reject(error);
      }
      const commit = stdout.trim();
      resolve(commit);
    });
  });
}

export async function buildInfo(): Promise<BuildInfo> {
  return {
    timestamp: new Date(),
    branch: await branch(),
    commit: await commit(),
  }
}

export default function buildInfoPlugin(): Plugin {
  return {
    name: "build-info",
    setup(build) {
      let info: Promise<BuildInfo> = buildInfo();

      // Handle the virtual "build-info" module
      build.onResolve({ filter: /^build-info$/ }, (args) => {
        return {
          namespace: "build-info",
          path: args.path,
        };
      });

      build.onLoad({ filter: /.*/, namespace: "build-info" }, async () => {
        const { timestamp, branch, commit } = await info;
        const contents = [
          `// Generated by esbuild-plugin-build-info`,
          ``,
          `export const timestamp = new Date("${timestamp}");`,
          `export const branch = "${branch}";`,
          `export const commit = ${JSON.stringify(commit, null, 2)};`,
          ``,
          `export default { timestamp, branch, commit };`,
          ``,
        ].join("\n");

        return {
          contents,
          loader: "js",
        };
      });
    },
  };
}
