import type { Plugin } from "vite";
import type { BuildInfo } from "./build/index";
import { exec } from "node:child_process";

const MODULE_NAME = "build-info";
const LOAD_NAME = "\0build-info";

export async function branch(): Promise<BuildInfo["branch"]> {
  if (process.env.GITHUB_REF_NAME) {
    return process.env.GITHUB_REF_NAME;
  }
  return new Promise((resolve, reject) => {
    exec("git rev-parse --abbrev-ref HEAD", {}, (error, stdout, stderr) => {
      if (stderr) {
        console.warn(stderr);
      }
      if (error) {
        reject(error);
      }
      resolve(stdout.trim());
    });
  });
}

export async function commit(): Promise<BuildInfo["commit"]> {
  if (process.env.GITHUB_SHA) {
    return process.env.GITHUB_SHA;
  }
  return new Promise((resolve, reject) => {
    exec(`git show --format="%H" -s HEAD`, {}, (error, stdout, stderr) => {
      if (stderr) {
        console.warn(stderr);
      }
      if (error) {
        reject(error);
      }
      const commit = stdout.trim();
      resolve(commit);
    });
  });
}

export async function buildInfo(): Promise<BuildInfo> {
  return {
    timestamp: new Date(),
    branch: await branch(),
    commit: await commit(),
  }
}

export default function plugin(): Plugin {
  let info = buildInfo();
  return {
    name: "rollup-plugin-build-info",
    buildStart() {
      info = buildInfo();
    },
    resolveId(source) {
      return source === MODULE_NAME ? LOAD_NAME : null;
    },
    async load(id) {
      if (id !== LOAD_NAME) {
        return null;
      }
      const { timestamp, branch, commit } = await info;
      const code = [
        `// Generated by rollup-plugin-build-info`,
        ``,
        `export const timestamp = new Date("${timestamp}");`,
        `export const branch = "${branch}";`,
        `export const commit = ${JSON.stringify(commit, null, 2)};`,
        ``,
        `export default { timestamp, branch, commit };`,
        ``,
      ].join("\n");
      return code;
    },
  };
}
