import type { Plugin } from "rollup";
import type { BuildInfo } from "./dist/index";
import { exec } from "node:child_process";

const MODULE_NAME = "build-info";
const LOAD_NAME = "\0build-info";

export async function branch(): Promise<BuildInfo["branch"]> {
  return new Promise((resolve, reject) => {
    exec("git rev-parse --abbrev-ref HEAD", {}, (error, stdout, stderr) => {
      if (stderr) {
        console.warn(stderr);
      }
      if (error) {
        reject(error);
      }
      resolve(stdout.trim());
    });
  });
}

export async function commit(): Promise<BuildInfo["commit"]> {
  return new Promise((resolve, reject) => {
    const format = ["%H", "%an", "%ae", "%at"].join("%n");
    exec(
      `git show --format="${format}" -s HEAD`,
      {},
      (error, stdout, stderr) => {
        if (stderr) {
          console.warn(stderr);
        }
        if (error) {
          reject(error);
        }
        const [hash, name, email, timestamp] = stdout.split("\n");
        resolve({
          hash: hash!,
          author: {
            name: name!,
            email: email!,
            timestamp: new Date(parseInt(timestamp!)),
          },
        });
      },
    );
  });
}

export async function buildInfo(): Promise<BuildInfo> {
  return {
    timestamp: new Date(),
    branch: await branch(),
    commit: await commit(),
  }
}

export default function plugin(): Plugin {
  let info = buildInfo();
  return {
    name: "rollup-plugin-build-info",
    buildStart() {
      info = buildInfo();
    },
    resolveId(source) {
      return source === MODULE_NAME ? LOAD_NAME : null;
    },
    async load(id) {
      if (id !== LOAD_NAME) {
        return null;
      }
      const { timestamp, branch, commit } = await info;
      const code = [
        `// Generated by rollup-plugin-build-info`,
        ``,
        `export const timestamp = new Date("${timestamp}");`,
        `export const branch = "${branch}";`,
        `export const commit = ${JSON.stringify(commit, null, 2)};`,
        ``,
        `export default { timestamp, branch, commit };`,
        ``,
      ].join("\n");
      return code;
    },
  };
}
